name: Test

on: [push, pull_request]

jobs:
  # This job checks if an identical workflow is being triggered by different
  # event and skips it. For instance there is no need to run the same pipeline
  # twice for pull_request and push for identical commit sha.
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3.4.1
        with:
          skip_after_successful_duplicate: 'true'
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
  build:
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Init Poetry cache
        id: cached-poetry
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Update Path
        run: echo "$HOME/.poetry/bin" >> $GITHUB_PATH
      - name: Install project
        run: |
          export POETRY_HOME=$HOME/.poetry
          export POETRY_CACHE_DIR=$HOME/.poetry/store
          make install
        if: steps.cached-poetry.outputs.cache-hit != 'true'
      - name: Build project
        run: poetry build -f wheel
      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.pkg_name }}
          path: dist
          retention-days: 7
  metrics:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Config path and poetry
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          $HOME/.poetry/bin/poetry config cache-dir $HOME/.poetry/store
      - name: Style guide
        run: |
          poetry run flake8 --select=E,W,I --max-line-length 80 --import-order-style pep8 --exclude .git,__pycache__,.eggs,*.egg,.pytest_cache,fastapi_mvc_template/version.py,setup.py,fastapi_mvc_template/__init__.py --tee --output-file=pep8_violations.txt --statistics --count setup.py fastapi_mvc_template
          poetry run flake8 --select=D --ignore D301 --tee --output-file=pep257_violations.txt --statistics --count setup.py fastapi_mvc_template
      - name: Code errors
        run: poetry run flake8 --select=F --tee --output-file=flake8_code_errors.txt --statistics --count setup.py fastapi_mvc_template
      - name: Code complexity
        run: poetry run flake8 --select=C901 --tee --output-file=code_complexity.txt --count fastapi_mvc_template
      - name: TODO
        run: poetry run flake8 --select=T --tee --output-file=todo_occurence.txt --statistics --count setup.py fastapi_mvc_template tests
  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Config path and poetry
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          $HOME/.poetry/bin/poetry config cache-dir $HOME/.poetry/store
      - name: Run unit tests
        run: poetry run py.test tests/unit --junit-xml=xunit-${{ matrix.python-version }}.xml
      - name: Run coverage
        run: poetry run pytest --cov=fastapi_mvc_template --cov-fail-under=70 --cov-report=xml --cov-report=term-missing tests
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Load Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: poetry-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Config path and poetry
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          $HOME/.poetry/bin/poetry config cache-dir $HOME/.poetry/store
      - name: Run integration tests
        run: poetry run py.test tests/integration --junit-xml=xunit-${{ matrix.python-version }}.xml